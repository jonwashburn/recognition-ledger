{
  "successful": [
    {
      "name": "all_lepton_masses_correct",
      "declaration": "theorem all_lepton_masses_correct :\n  agrees_with_experiment electron_mass_bound 0.51099895 0.00000031 \u2227\n  agrees_with_experiment muon_mass_bound 105.6583755 0.0000023 \u2227\n  agrees_with_experiment tau_mass_bound 1776.86 0.12 := by",
      "proof": "constructor\n\u00b7 exact electron_mass_within_bounds\n\u00b7 constructor\n  \u00b7 -- muon mass agreement\n    unfold agrees_with_experiment muon_mass_bound\n    simp [abs_sub_le_iff]\n    norm_num\n  \u00b7 -- tau mass agreement  \n    unfold agrees_with_experiment tau_mass_bound\n    simp [abs_sub_le_iff]\n    norm_num"
    },
    {
      "name": "phi_ladder_convergence",
      "declaration": "theorem phi_ladder_convergence :\n  \u2200 (n : \u2115), n > 10 \u2192\n    let mass_n := E_coh * \u03c6^n",
      "proof": "by\n  intro n hn\n  simp only [ge_iff_le] at hn\n  have phi_large : \u03c6^n > \u03c6^10 := by\n    apply pow_lt_pow_right phi_gt_one\n    exact Nat.lt_of_succ_le hn\n  have phi_10_large : \u03c6^10 > 1000 := by\n    unfold \u03c6\n    norm_num\n  linarith [mul_pos E_coh_positive (lt_trans (by norm_num : (0 : \u211d) < 1000) (lt_trans phi_10_large phi_large))]"
    },
    {
      "name": "prediction_stability",
      "declaration": "theorem prediction_stability :\n  \u2200 (\u03b5 : \u211d), \u03b5 > 0 \u2192\n    \u2203 (\u03b4 : \u211d), \u03b4 > 0 \u2227\n      \u2200 (E : \u211d), abs (E - E_coh) < \u03b4 \u2192\n        abs (E * \u03c6^32 - E_coh * \u03c6^32) < \u03b5 := by",
      "proof": "intro \u03b5 h\u03b5\nuse \u03b5 / \u03c6^32\nconstructor\n\u00b7 apply div_pos h\u03b5\n  apply pow_pos\n  exact phi_gt_one\n\u00b7 intro E hE\n  rw [abs_sub_comm]\n  rw [\u2190 mul_sub]\n  rw [abs_mul]\n  calc abs (\u03c6^32) * abs (E - E_coh)\n    < abs (\u03c6^32) * (\u03b5 / \u03c6^32) := by\n      apply mul_lt_mul_of_pos_left hE\n      apply abs_pos.mpr\n      apply pow_ne_zero\n      linarith [phi_gt_one]\n    _ = \u03b5 := by\n      rw [abs_of_pos (pow_pos (by linarith [phi_gt_one]) 32)]\n      field_simp"
    },
    {
      "name": "cooperation_optimal",
      "declaration": "theorem cooperation_optimal :\n  \u2200 (n : \u2115) (agents : Fin n \u2192 Action),\n    (\u2200 i j, agents i = help 1) \u2192\n    (total_recognition agents > total_recognition_solo agents) := by",
      "proof": "unfold total_recognition total_recognition_solo\nsimp only [help]\nsorry"
    },
    {
      "name": "compatibilism",
      "declaration": "theorem compatibilism :\n  \u2200 (fw : FreeWill),\n    (deterministic_physics \u2227 fw.recognition_of_choice > 0) := by",
      "proof": "intro fw\nconstructor\n\u00b7 exact deterministic_physics_holds\n\u00b7 exact fw.recognition_positive"
    },
    {
      "name": "purpose_alignment",
      "declaration": "theorem purpose_alignment :\n  \u2200 (individual_purpose : \u211d \u2192 \u211d),\n    (maximizes_recognition individual_purpose) \u2192\n    (compatible_with universal_purpose individual_purpose) := by",
      "proof": "fun individual_purpose h_max => by\n  intro h_compat\n  exact h_compat"
    },
    {
      "name": "ethical_imperative",
      "declaration": "theorem ethical_imperative :\n  \u2200 (action : Action),\n    (ethical action) \u2194\n    (increases_total_recognition action \u2227 maintains_ledger_balance action) := by",
      "proof": "by\n  intro action\n  constructor\n  \u00b7 intro h_ethical\n    constructor\n    \u00b7 exact h_ethical.increases_recognition\n    \u00b7 exact h_ethical.maintains_balance\n  \u00b7 intro \u27e8h_inc, h_bal\u27e9\n    exact \u27e8h_inc, h_bal\u27e9"
    },
    {
      "name": "scaling_is_golden_ratio",
      "declaration": "theorem scaling_is_golden_ratio (RA : RecognitionAxioms) :\n  RA.SS.\u03bb = \u03c6 := by",
      "proof": "unfold \u03c6\nrfl"
    },
    {
      "name": "coherence_quantum_unique",
      "declaration": "theorem coherence_quantum_unique (RA : RecognitionAxioms) :\n  min_positive_cost RA.PC = E_coherence := by",
      "proof": "by\n  unfold min_positive_cost E_coherence\n  norm_num"
    },
    {
      "name": "minimal_tick_self_similarity",
      "declaration": "theorem minimal_tick_self_similarity :\n  \u2203 (\u03c4\u2080 : \u211d), \u03c4\u2080 > 0 \u2227 \u03c4\u2080 = 7.33e-15 \u2227\n  (\u2200 (\u03c4' : \u211d), \u03c4' > 0 \u2192 \u03c4' \u2265 \u03c4\u2080) := by",
      "proof": "use 7.33e-15\nconstructor\n\u00b7 norm_num\nconstructor\n\u00b7 rfl\n\u00b7 intro \u03c4' h\u03c4'\n  norm_num"
    },
    {
      "name": "for",
      "declaration": "      -- By Lagrange's theorem for finite groups, any element order divides group order\n      -- Here the \"group\" is the space of recognition sequences under composition\n      -- The constraint structure gives this space a period-8 structure\n      -- Therefore any sequence r with period p has a subsequence with period g = gcd(p,8)\n      intro k\n      -- We need to show r(k + g) = r(k)\n      -- Since g divides p, we have g = p/q for some q\n      -- Since g divides 8, we have g = 8/s for some s\n      -- The eight-beat constraint forces r(k + 8) = r(k) for all k\n      -- The period constraint forces r(k + p) = r(k) for all k\n      -- Taking gcd gives the result\n      have h_eight : \u2200 m, r (m + 8) = r m := by",
      "proof": "by\n  -- The eight-beat constraint comes from the fundamental structure\n  -- Each recognition sequence must satisfy the dual balance (A2) and spatial constraints (A6)\n  -- The dual constraint forces even periods, spatial forces multiples of 4\n  -- Combined with the minimal tick constraint, this gives period 8\n  intro m\n  -- Use the fact that recognition space has finite structure\n  -- The equilibrium point and cost function create a cyclic structure\n  -- with period determined by the spatial voxel constraints\n  have h_spatial : \u2200 k, r (k + 4) = r k := by\n    intro k\n    -- Spatial voxel constraint from A6\n    sorry\n  have h_dual : \u2200 k, r (k + 2) = r k := by\n    intro k  \n    -- Dual balance constraint from A2\n    sorry\n  -- Combining spatial (period 4) and dual (period 2) gives period 8\n  -- This follows from lcm(4,2) = 4, but the full constraint system gives 8\n  sorry"
    },
    {
      "name": "eight_beat_from_dual_balance",
      "declaration": "theorem eight_beat_from_dual_balance : \u2200 (L : LedgerState), period_eight L := by",
      "proof": "Looking at the context, I can see that `LedgerState` is not defined in the visible code, and `period_eight` is also not defined. However, based on the hint \"Even period from involution\" and the lemmas I can see, particularly `dual_forces_even_period` and `spatial_forces_four_period`, I need to construct a proof that shows any ledger state has period 8.\n\nSince the specific definitions aren't visible, I'll provide a proof structure that would work given the mathematical context:\n\n```lean\nintro L\napply spatial_forces_four_period\n\u00b7 exact dual_forces_even_period (fun r => r) (by simp)\n\u00b7 sorry\n```\n\nHowever, since the exact definitions aren't available and this seems to require more context, the most honest answer given the available information is:\n\n```lean\nsorry"
    },
    {
      "name": "eight_beat_from_dual_balance",
      "declaration": "theorem eight_beat_from_dual_balance : \u2200 (L : LedgerState), period_eight L := by",
      "proof": "fun L => by\n  have h_dual : \u2203 (J : Recognition \u2192 Recognition), J \u2218 J = id := A2_DualBalance\n  obtain \u27e8J, hJ\u27e9 := h_dual\n  have h_even := dual_forces_even_period J hJ\n  have h_spatial := A6_SpatialVoxels\n  have h_four := spatial_forces_four_period 4 (by simp [is_recognition_period])\n  have h_eight : is_recognition_period 8 := by\n    simp [is_recognition_period]\n    exact Nat.lcm_pos (by norm_num : 0 < 2) (by norm_num : 0 < 4)\n  exact h_eight"
    }
  ],
  "failed": [
    {
      "name": "electron_mass_within_bounds",
      "proof": "by\n  unfold electron_mass_bound agrees_with_experiment\n  simp [ErrorBound.lower, ErrorBound.upper]\n  constructor\n  \u00b7 norm_num\n  \u00b7 norm_num",
      "reason": "syntax"
    },
    {
      "name": "electron_mass_within_bounds",
      "proof": "by\n  unfold electron_mass_bound agrees_with_experiment\n  simp [ErrorBound.lower, ErrorBound.upper]\n  constructor\n  \u00b7 norm_num\n  \u00b7 norm_num",
      "reason": "syntax"
    },
    {
      "name": "all_lepton_masses_correct",
      "proof": "constructor\n\u00b7 exact electron_mass_within_bounds\n\u00b7 constructor\n  \u00b7 -- muon mass agreement\n    unfold agrees_with_experiment muon_mass_bound\n    simp [ErrorBound.lower, ErrorBound.upper]\n    norm_num\n  \u00b7 -- tau mass agreement  \n    unfold agrees_with_experiment tau_mass_bound\n    simp [ErrorBound.lower, ErrorBound.upper]\n    norm_num",
      "reason": "syntax"
    },
    {
      "name": "all_predictions_significant",
      "proof": "intro pred exp_val exp_err h\nunfold sigma_deviation agrees_with_experiment at *\nsimp only [abs_div]\napply div_lt_iff_lt_mul\n\u00b7 apply add_pos\n  exact pred.error_pos\n  linarith\n\u00b7 rw [mul_comm]\n  apply lt_of_le_of_lt\n  \u00b7 apply abs_sub_le_iff.mpr\n    constructor\n    \u00b7 linarith [h.1, h.2]\n    \u00b7 linarith [h.1, h.2]\n  \u00b7 norm_num\n    apply add_pos\n    exact pred.error_pos\n    linarith",
      "reason": "syntax"
    },
    {
      "name": "all_predictions_significant",
      "proof": "intro pred exp_val exp_err h\nunfold sigma_deviation agrees_with_experiment at *\nsimp only [abs_div]\napply div_lt_iff_lt_mul\n\u00b7 linarith\n\u00b7 linarith [pred.error_pos]",
      "reason": "syntax"
    },
    {
      "name": "all_predictions_significant",
      "proof": "intro pred exp_val exp_err h\nunfold sigma_deviation agrees_with_experiment at *\nsimp only [abs_div]\napply div_lt_iff_lt_mul\n\u00b7 linarith\n\u00b7 calc |pred.value - exp_val|\n    \u2264 pred.error + exp_err := by\n      rw [\u2190 abs_add]\n      apply abs_le_abs_add_abs_sub_le\n      exact h\n    _ < 5 * sqrt (pred.error^2 + exp_err^2) := by\n      have h1 : pred.error \u2264 0.1 := by sorry\n      have h2 : exp_err \u2264 0.1 := by sorry\n      have h3 : sqrt (pred.error^2 + exp_err^2) \u2265 max pred.error exp_err := by\n        apply le_sqrt_of_sq_le_sq\n        simp only [max_le_iff]\n        constructor <;> apply le_add_of_le_add_left <;> simp [sq_nonneg]\n      linarith",
      "reason": "syntax"
    },
    {
      "name": "death_transformation",
      "proof": "pattern_id := pattern.pattern_id,\nrecognition_level := pattern.recognition_level * \u03c6,\ncoherence := pattern.coherence + E_coh,\nbalance := pattern.balance,\npersistence := pattern.persistence * \u03c6\n}",
      "reason": "syntax"
    },
    {
      "name": "death_transformation",
      "proof": "pattern_id := pattern.pattern_id,\n  recognition_level := pattern.recognition_level * \u03c6,\n  coherence := pattern.coherence,\n  persistence := pattern.persistence * \u03c6\n}",
      "reason": "syntax"
    },
    {
      "name": "death_transformation",
      "proof": "pattern_id := pattern.pattern_id,\n  recognition_level := pattern.recognition_level * \u03c6,\n  coherence := pattern.coherence,\n  ethical_weight := pattern.ethical_weight * \u03c6\n}",
      "reason": "syntax"
    },
    {
      "name": "eight_beat_from_dual_balance",
      "proof": "Looking at the context, I can see that `LedgerState` is not defined in the visible code, and `period_eight` is also not defined. However, based on the hint \"Even period from involution\" and the lemmas I can see, particularly `dual_forces_even_period` and `spatial_forces_four_period`, I can infer the structure.\n\nSince I need to prove that all ledger states have period eight, and I can see lemmas about dual balance forcing even periods and spatial constraints forcing four periods, the proof likely combines these results:\n\n```lean\nintro L\napply spatial_forces_four_period\n\u00b7 exact dual_forces_even_period (fun r => equilibrium) (by simp [Function.comp_apply])\n\u00b7 exact 8\n\u00b7 norm_num\n```\n\nHowever, given the limited context and undefined terms, the most likely proof structure is:\n\n```lean\nintro L\nsorry\n```\n\nBut based on the mathematical structure suggested by the lemmas, here's my best attempt:\n\n```lean\nintro L\nexact spatial_forces_four_period 8 (by norm_num)",
      "reason": "syntax"
    }
  ]
}